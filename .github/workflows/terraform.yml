name: workspace-provisioning

on:
  workflow_dispatch:
  push:
    branches: [ '*' ]
    paths:
      - '.github/workflows/terraform.yml'
      - '**/*.tf'
  pull_request:
    branches: ["main"]
    paths:
      - '.github/workflows/terraform.yml'
      - '**/*.tf'

permissions: read-all

jobs:
  terraform:
    env:
      TFE_TOKEN: ${{ secrets.TF_API_TOKEN }}
    name: 'hcp-terraform-workspace-management'
    runs-on: ubuntu-latest
    environment: development
    permissions:
      contents: read
      pull-requests: write
    defaults:
      run:
        shell: bash
        working-directory: '01-workspace-management'

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3

    - name: Setup HCP Terraform credentials
      run: |
        mkdir -p ~/.terraform.d
        cat > ~/.terraform.d/credentials.tfrc.json << EOF
        {
          "credentials": {
            "app.terraform.io": {
              "token": "${{ secrets.TF_API_TOKEN }}"
            }
          }
        }
        EOF

    - name: Terraform Init
      id: init
      run: terraform init

    # - name: Terraform Format
    #   id: fmt
    #   run: terraform fmt -check

    # - name: Terraform Validate
    #   id: validate
    #   run: terraform validate -no-color

    # - name: Terraform Plan
    #   id: plan
    #   if: github.ref != 'refs/heads/main' || github.event_name == 'pull_request'
    #   run: |
    #     terraform plan -no-color -input=false \
    #     -var="aws_role_arn=${{ secrets.AWS_ROLE_ARN_FOR_TERRAFORM_WORKSPACE }}" \
    #     -var="github_app_installation_id=${{ secrets.INSTALLATION_ID }}"

    # - name: Post Terraform Plan output
    #   uses: actions/github-script@v6
    #   if: github.event_name == 'pull_request'
    #   env:
    #     PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
    #   with:
    #     github-token: ${{ secrets.GITHUB_TOKEN }}
    #     script: |
    #       const output = `#### Terraform Format and Style 🖌\`${{ steps.fmt.outcome }}\`
    #       #### Terraform Initialization ⚙️\`${{ steps.init.outcome }}\`
    #       #### Terraform Plan 📖\`${{ steps.plan.outcome }}\`
    #       #### Terraform Validation 🤖\`${{ steps.validate.outcome }}\`

    #       <details><summary>Show Plan</summary>

    #       \`\`\`\n
    #       ${process.env.PLAN}
    #       \`\`\`

    #       </details>

    #       *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

    #       github.rest.issues.createComment({
    #         issue_number: context.issue.number,
    #         owner: context.repo.owner,
    #         repo: context.repo.repo,
    #         body: output
    #       })

    - name: Terraform Apply
      # if: github.ref == 'refs/heads/main'
      run: |
        terraform apply -auto-approve -input=false \
        -var="aws_role_arn=${{ secrets.AWS_ROLE_ARN_FOR_TERRAFORM_WORKSPACE }}" \
        -var="oauth_token_id=${{ secrets.OAUTH_TOKEN_ID }}"